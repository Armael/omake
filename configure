#! /bin/sh

# a more standard config approach...

help() {
    cat <<EOF
configure options:

  --prefix=/some/path
      Set the install prefix
  --disable-readline
      Do not include readline support even if detected
  --disable-ncurses
      Do not include ncurses support even if detected
  --disable-fam
      Do not include FAM support even if detected
EOF
}


ocamlc="$(which ocamlc)"
if [ -z "$ocamlc" ]; then
    echo "ocamlc not found; aborting." >&2
    exit 1
fi
case "$ocamlc" in
    */bin/ocamlc)
        prefix="${ocamlc%/bin/ocamlc}" ;;
    *)
        prefix="/usr/local" ;;
esac

no_readline=0
no_ncurses=0
no_fam=0

while [ $# -gt 0 ]; do
    case "$1" in
        -prefix|--prefix)
            prefix="$2"; shift 2;;
        --prefix=*)
            prefix="${1#--prefix=}"; shift ;;
        -disable-readline|--disable-readline)
            no_readline=1; shift ;;
        -disable-ncurses|--disable-ncurses)
            no_ncurses=1; shift ;;
        -disable-fam|--disable-fam)
            no_fam=1; shift ;;
        -help|--help)
            help; exit 0 ;;
        *)
            echo "bad arg: $1" >&2
            echo "run ./configure --help to get list of options" >&2
            exit 1 ;;
    esac
done

rm -f mk/preconfig
echo "public.PREFIX = $prefix" >>mk/preconfig

if [ $no_readline -gt 0 ]; then
    echo "public.READLINE_ENABLED = false" >>mk/preconfig
else
    echo "#public.READLINE_ENABLED = false" >>mk/preconfig
fi

if [ $no_ncurses -gt 0 ]; then
    echo "public.NCURSES_ENABLED = false" >>mk/preconfig
else
    echo "#NCURSES_ENABLED = false" >>mk/preconfig
fi

if [ $no_fam -gt 0 ]; then
    echo "public.FAM_ENABLED = false" >>mk/preconfig
else
    echo "#public.FAM_ENABLED = false" >>mk/preconfig
fi

echo "Wrote mk/preconfig"

rm -f .config
